// Get OpenAI response
const openAIResponse = $input.first().json;
const prData = $('GitHub Trigger').first().json.body;

// Extract the review data from OpenAI response
let reviewData;
try {
  // Parse the content if it's a string
  if (typeof openAIResponse.message.content === 'string') {
    reviewData = JSON.parse(openAIResponse.message.content);
  } else {
    reviewData = openAIResponse.message.content;
  }
} catch (error) {
  console.error('Error parsing OpenAI response:', error);
  reviewData = {
    overall_review: "Error processing review. Please check the logs.",
    comments: []
  };
}

// Validate response structure
if (!reviewData.comments || !Array.isArray(reviewData.comments)) {
  console.error('Invalid response format from OpenAI');
  reviewData.comments = [];
}

// Group comments by file path
const commentsByFile = {};
reviewData.comments.forEach(comment => {
  if (!commentsByFile[comment.path]) {
    commentsByFile[comment.path] = [];
  }
  commentsByFile[comment.path].push({
    path: comment.path,
    line: comment.line || 1, // Default to line 1 if line is 0 or undefined
    body: `ðŸ¤– **Automated Review**\n\n${comment.body}\n\n---\n*This comment was generated by an automated review system*`
  });
});

return {
  commentsByFile: commentsByFile,
  totalComments: reviewData.comments.length,
  filesReviewed: Object.keys(commentsByFile).length,
  prData: prData
};
